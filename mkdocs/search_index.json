{
    "docs": [
        {
            "location": "/", 
            "text": "This document describes the NEWZNAB Usenet Searching Web API. The API is\ndesigned to be implemented by Usenet indexing sites, i.e. sites that index\nUsenet newsgroups through some means, typically by downloading and inspecting\nthe NTTP headers. The API is aimed for NZB aware client applications  to allow\nthem to perform Usenet searches against Newznab servers and receive NZB\ninformation in order to facilitate direct downloading from Usenet without\nhaving to download any NTTP headers.\n\n\nThis document does not describe the actual implementation of either the client\nor the server but just describes the HTTP(S) interface and request/response\nsequences.\n\n\nIntended readers are server and client implementers.\n\n\nNotation\n\n\nThis document uses the following notations:\n\n\nParameters:\n\n\n\n\nt=c\n denotes a required HTTP query parameter.\n\n\n[o=json | o=xml]\n denotes optional parameters with possible values.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#notation", 
            "text": "This document uses the following notations:  Parameters:   t=c  denotes a required HTTP query parameter.  [o=json | o=xml]  denotes optional parameters with possible values.", 
            "title": "Notation"
        }, 
        {
            "location": "/functions/", 
            "text": "All functions are executed as HTTP(S) requests over TCP. All parameters are to\nbe passed as query parameters unless otherwise indicated. All returned XML/JSON\ndata is UTF-8 encoded unless otherwise specified. All query parameters should\nbe UTF-8 and URL encoded, i.e.::\n\n\nquery-param = URL-ENCODE(UTF8-ENCODE(param=value)).\n\n\n\nThe functions are divided into two categories. Functions specific to searching\nand retrieving of items and the their information such as SEARCH and TV-SEARCH\nand functions that are for site/user account management such as CAPS and\nREGISTER.\n\n\nAny conforming implementation should support the CAPS and SEARCH functions.\nOther functions are optional and if not supported will return the \"203 Function\nNot Available\" when invoked. \n\n\nCAPS\n\n\nThe \nCAPS\n function is used to query the server for supported features and\nthe protocol version and other meta data relevant to the implementation. This\nfunction doesn't require the client to provide any login information but\ncan be executed out of \"login session\".\n\n\n\n\n\n\n\n\nReturned Fields\n\n\n\n\n\n\n\n\n\n\n\n\nserver/version\n\n\nThe version of the protocol implemented by the server. All implementations should be backwards compatible.\n\n\n\n\n\n\nlimits\n\n\nThe limit and defaults to the number of search results returned.\n\n\n\n\n\n\nretention\n\n\nServer retention (how many days NZB information is stored before being purged).\n\n\n\n\n\n\ncategory\n\n\nDefines a searchable category which might have any number of subcategories.\n\n\n\n\n\n\ncategory/id\n\n\nUnique category ID, can be either one of the standard category IDs or a site specific ID.\n\n\n\n\n\n\ncategory/name\n\n\nAny descriptive name for the category. Can be site/language specific.\n\n\n\n\n\n\ncategory/description\n\n\nA description of the contents of the category.\n\n\n\n\n\n\ncategory/subcat\n\n\nA subcategory.\n\n\n\n\n\n\ncategory/subcat/id\n\n\nUnique category ID, can be either one of the standard category IDs or a site specific ID.\n\n\n\n\n\n\ncategory/subcat/name\n\n\nAny descriptive name for the category. Can be site/language specific.\n\n\n\n\n\n\ncategory/subcat/description\n\n\nA description of the contents of the category.\n\n\n\n\n\n\ngroups\n\n\nDefines a list of active, indexed usenet groups.\n\n\n\n\n\n\ngroup/name\n\n\nName of usenet group.\n\n\n\n\n\n\ngroup/description\n\n\nDescription of usenet group.\n\n\n\n\n\n\ngroup/lastupdate\n\n\nDate and time usenet group was last updated.\n\n\n\n\n\n\ngenres\n\n\nDefines a list of active genres.\n\n\n\n\n\n\ngenre/id\n\n\nId of genre.\n\n\n\n\n\n\ngenre/name\n\n\nName of genre.\n\n\n\n\n\n\ngenre/categoryid\n\n\nThe category the genre is associate with.\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=caps\n\n\nCaps function, must always be \"caps\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional parameters\n\n\n\n\n\n\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML. Default is \"XML\".\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=caps\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n  \ncaps\n\n    \n!-- server information --\n\n    \nserver version=\"1.0\" title=\"Newznab\" strapline=\"A great usenet indexer\" \n            email=\"info@newznab.com\" url=\"http://servername.com/\" \n            image=\"http://servername.com/theme/black/images/banner.jpg\"/\n\n\n    \n!-- limit parameter range --\n\n    \nlimits max=\"100\" default=\"50\"/\n\n\n    \n!-- the server NZB retention --\n\n    \nretention days=\"400\"/\n\n\n    \n!-- registration available or not --\n\n    \nregistration available=\"yes\" open=\"yes\" /\n\n\n    \n!-- \n         The search functions available at the server \n         The only currently defined search functions are SEARCH and TV-SEARCH.\n         Any conforming implementation should at least support the basic search.\n         Other search functions are optional.\n    --\n\n    \nsearching\n\n        \nsearch available=\"yes\"/\n\n        \ntv-search available=\"yes\"/\n\n        \nmovie-search available=\"no\"/\n\n    \n/searching\n\n\n    \n!-- supported categories --\n\n    \ncategories\n\n        \ncategory id=\"1000\" name=\"Console\"\n\n          \nsubcat id=\"1010\" name=\"NDS\"/\n\n          \nsubcat id=\"1020\" name=\"PSP\"/\n\n        \n/category\n\n        \ncategory id=\"2000\" name=\"Movies\"\n\n          \nsubcat id=\"2010\" name=\"Foreign\"/\n\n        \n/category\n\n\n        \n!-- site specific categories --\n\n        \ncategory id=\"1000001\" name=\"Debian\"           description=\"Latest Debian stuff\"/\n\n        \ncategory id=\"1000002\" name=\"Mandrake 2010\"    description=\"Mandrake 2010\"\n\n          \nsubcat id=\"1000003\" name=\"Mandrake 2010 HD\" description=\"Mandrake HD stuff\"/\n\n          \nsubcat id=\"1000004\" name=\"Mandrake 2010 SD\" description=\"Mandrake SD stuff\"/\n\n        \n/category\n\n        \n!-- etc.. --\n\n    \n/categories\n               \n  \n/caps\n\n\n/xml\n\n\n\n\n\n\n\n\nREGISTER\n\n\nThe \nREGISTER\n function is used for automatically creating and registering\nuser account.  This is an optional function and may or may not be available at\na site. It is also possible that function is available but currently\nregistrations at the site are closed. \n\n\nThe only prerequisite for registering an account is a valid email address\nand any server policies.  It is at the server administration discretion to\nallow or deny registrations based on for example the validity of the email\naddress or the the current client host address.\n\n\nOn successful registration a valid username, password and api key are\nreturned to the caller.  On error an appropriate error code is returned.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=register\n\n\nRegister function, must always be \"register\"\n\n\n\n\n\n\nemail=xxx\n\n\nA valid email address to be used for registration. (URL/UTF-8 encoded).\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=register\nemail=john.joe%40acme.com\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nregister username=\"user123\" password=\"pass123\" apikey=\"abcabcd11234abc\" /\n\n\n\n\n\n\n\n\nDenial\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=register\nemail=john.joe%40acme.com\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"103\" description=\"Registration denied\"/\n\n\n\n\n\n\n\n\nRegistration limit imposed\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=register\nemail=john.joe%40acme.com\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"104\" description=\"No more registrations allowed\"/\n\n\n\n\n\n\n\n\nRegistration disabled\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=register\nemail=john.joe%40acme.com\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"203\" description=\"Function not available\"/\n\n\n\n\n\n\n\n\nSEARCH\n\n\nThe \nSEARCH\n function searches the index for items matching the search\ncriteria. On successful search the response contains a list of found items.\nEven if search matched nothing an empty response set is created and returned.\nThis function requires passing the user credentials.\n\n\nSearches that include categories that are not supported by the server are\nstill executed but the non-supported categories are simply skipped. This\nbasically treats such a search simply as a \"no match\" but allows the same\nquery to be ran simultaneously against several servers. \n\n\nThe list of search categories specifies a logical OR condition. I.e. an item\nmatching the search input in any of the specified categories is considered a\nmatch and is returned. E.g. a search searching for \"linux\" in \"computer\" and\n\"ebook\" categories searches for matching items in \"computer\" and \"ebook\" but\ndoes not search for example the \"movies\" category.  Items found in either\ngroup are then combined into a single result set. If the input string for\nsearch is empty all items (within the server/query limits) are returned for\nthe matching categories. \n\n\nWhen performing the query the categories to be searched are concatenated into\na single query parameter by \n,\n (comma). For example \ncat=200,300,400\n,\nwhich is then URL encoded.\n\n\nThe returned XML data stream is RSS 2.0 compliant and also contains\nadditional information in the extra namespace.\n\n\nResponse-offset field identifies the current subset of all the matches that\nare being transmitted in the response. In other words, if a search for\n\"disco\" finds more matches than the server is capable of transmitting in a\nsingle response, the response needs to be split into several responses. Then\nit is's the clients responsibility to repeat the same query with same\nparameters but specify an increased offset in order to return the next set of\nresults. \n\n\nIf offset query parameter is not used response data contains items between 0\noffset - limit.  If offset query parameter is out of bounds an empty result\nset is returned.\n\n\nAttrs parameter provides a comma \",\" separated list of additional (extended)\nattributes that the search should return if they are applicable to the\ncurrent item.  If attrs is not specified a set of default parameters is\nreturned.\n\n\n\n\n\n\n\n\nImportant fields of the returned data (RSS)\n\n\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nTitle of the found item.\n\n\n\n\n\n\nguid\n\n\nA globally unique (GUID) item identifier.\n\n\n\n\n\n\npubdate\n\n\nThe publishing date in RSS date object as specified by RFC822/2822. (not the Usenet date)\n\n\n\n\n\n\ncategory\n\n\nThe category the NZB belongs to. (This is human readable for RSS. More precise category is found in additional data)\n\n\n\n\n\n\nenclosure\n\n\nThe NZB url\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=search\n\n\nSearch function, must always be \"search\"\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional parameters\n\n\n\n\n\n\n\n\n\n\n\n\nq=xxxx\n\n\nSearch input (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\ngroup=xxxx\n\n\nList of usenet groups to search delimited by \",\"\n\n\n\n\n\n\nlimit=123\n\n\nUpper limit for the number of items to be returned.\n\n\n\n\n\n\ncat=xxx\n\n\nList of categories to search delimited by \",\"\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\nattrs=xxx\n\n\nList of requested extended attributes delimeted by \",\"\n\n\n\n\n\n\nextended=1\n\n\nList all extended attributes (attrs ignored)\n\n\n\n\n\n\ndel=1\n\n\nDelete the item from a users cart on download.\n\n\n\n\n\n\nmaxage=123\n\n\nOnly return results which were posted to usenet in the last x days.\n\n\n\n\n\n\noffset=50\n\n\nThe 0 based query offset defining which part of the response we want.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=search\napikey=xxxxx\nq=a%20tv%20show\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\n\nchannel\n\n\ntitle\nexample.com\n/tile\n\n\ndescription\nexample.com API results\n/description\n\n\n!--  \n   More RSS content\n --\n\n\n\n!-- offset is the current offset of the response\n     total is the total number of items found by the query \n --\n \n\nnewznab:response offset=\"0\" total=\"2344\"/\n\n\n\nitem\n        \n  \n!-- Standard RSS 2.0 Data --\n\n  \ntitle\nA.Public.Domain.Tv.Show.S06E05\n/title\n \n  \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n  \nlink\nhttp://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\n/link\n \n  \ncomments\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments\n/comments\n  \n  \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n  \ncategory\nTV \n XviD\n/category\n  \n  \ndescription\nSome TV show\n/description\n\n  \nenclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n\n\n  \n!-- Additional attributes --\n\n  \nnewznab:attr name=\"category\" value=\"2000\"/\n \n  \nnewznab:attr name=\"category\" value=\"2030\"/\n \n  \nnewznab:attr name=\"size\"     value=\"4294967295\"/\n\n\n/item\n\n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nNo items matched the search criteria.\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=search\napikey=xxxxx\nq=linux%20image\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss\n\n\nchannel\n\n    \nnewznab:response offset=\"0\" total=\"0\"/\n\n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=search\napikey=xxxxx\nq=linux%20image\n\n\nResponse\n:\n\n\n200  OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because it was malformed\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=search\napikey=xxxxx\nq=linux%20image\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"200\" description=\"Missing parameter: key\"/\n\n\n\n\n\n\n\n\nTV-SEARCH\n\n\nThe \nTV-SEARCH\n function searches the index in the TV category for items\nmatching the search criteria.  The criteria includes query string and in\naddition information about season and episode. On successful search the\nresponse contains a list of items that matched the query. Even if the search\nmatched nothing an empty but valid response is created and returned. This\nfunction requires passing the user credentials.\n\n\nThe returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally TV specific information.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=tvsearch\n\n\nTV-Search function, must always be \"tvsearch\".\n\n\n\n\n\n\napikey=xxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional parameters\n\n\n\n\n\n\n\n\n\n\n\n\nlimit=123\n\n\nUpper limit for the number of items to be returned, e.g. 123.\n\n\n\n\n\n\nrid=xxxx\n\n\nTVRage id of the item being queried.\n\n\n\n\n\n\ncat=xxx\n\n\nList of categories to search delimited by \",\"\n\n\n\n\n\n\nseason=xxxx\n\n\nSeason string, e.g S13 or 13 for the item being queried.\n\n\n\n\n\n\nq=xxxx\n\n\nSearch input (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\nep=xxx\n\n\nEpisode string, e.g E13 or 13 for the item being queried.\n\n\n\n\n\n\no=xml\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\nattrs=xxx\n\n\nList of requested extended attributes delimeted by \",\"\n\n\n\n\n\n\nextended=1\n\n\nList all extended attributes (attrs ignored)\n\n\n\n\n\n\ndel=1\n\n\nDelete the item from a users cart on download.\n\n\n\n\n\n\nmaxage=123\n\n\nOnly return results which were posted to usenet in the last x days.\n\n\n\n\n\n\noffset=50\n\n\nThe 0 based query offset defining which part of the response we want.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\nGET http://servername.com/api?t=tvsearch\napikey=xxx\nq=title\nseason=S03\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\nchannel\n\n\ntitle\nexample.com\n/title\n\n\ndescription\nexample.com API results\n/description\n\n\n!-- \n  More RSS content\n--\n\n\n\n!-- offset is the current offset of the response\n     total is the total number of items found by the query\n--\n\n\nnewznab:response offset=\"0\" total=\"1234\"/\n\n\n\nitem\n\n  \n!-- Standard RSS 2.0 data --\n\n  \ntitle\nA.Public.Domain.Tv.Show.S06E05\n/title\n \n  \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n  \nlink\nhttp://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\n/link\n \n  \ncomments\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments\n/comments\n  \n  \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n  \ncategory\nTV \n XviD\n/category\n  \n  \ndescription\nSome TV show\n/description\n\n  \nenclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n\n\n  \n!-- Additional attributes --\n\n  \nnewznab:attr name=\"category\" value=\"5030\"/\n\n  \nnewznab:attr name=\"size\"     value=\"154653309\"/\n\n  \nnewznab:attr name=\"season\"   value=\"3\"/\n\n  \nnewznab:attr name=\"episode\"  value=\"2\"/\n\n\n/item\n\n\n\nitem\n\n  \n!-- Standard RSS 2.0 data --\n\n  \ntitle\nA.Public.Domain.Tv.Show.S06E05\n/title\n \n  \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n  \nlink\nhttp://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\n/link\n \n  \ncomments\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments\n/comments\n  \n  \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n  \ncategory\nTV \n XviD\n/category\n  \n  \ndescription\nSome TV show\n/description\n\n  \nenclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n\n\n  \n!-- Additional attributes --\n\n  \nnewznab:attr name=\"category\" value=\"5000\" /\n \n  \nnewznab:attr name=\"category\" value=\"5030\" /\n \n  \nnewznab:attr name=\"size\"     value=\"4294967295\" /\n \n  \nnewznab:attr name=\"season\"   value=\"3\"/\n\n  \nnewznab:attr name=\"episode\"  value=\"1\"/\n\n\n/item\n\n\n\n!-- more items to follow --\n\n\n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nMOVIE-SEARCH\n\n\nThe \nMOVIE-SEARCH\n function searches the index for items matching an IMDb ID or\nsearch query.  On successful search the response contains a list of items that\nmatched the query. Even if the search matched nothing an empty but valid\nresponse is created and returned. This function requires passing the user\ncredentials.\n\n\nThe returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally movie specific information.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=movie\n\n\nMovie-Search function, must always be \"movie\".\n\n\n\n\n\n\napikey=xxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional parameters\n\n\n\n\n\n\n\n\n\n\n\n\nlimit=123\n\n\nUpper limit for the number of items to be returned, e.g. 123.\n\n\n\n\n\n\nimdbid=xxxx\n\n\nIMDB id of the item being queried e.g. 0058935.\n\n\n\n\n\n\ncat=xxx\n\n\nList of categories to search delimited by \",\"\n\n\n\n\n\n\ngenre=xxx\n\n\nA genre string i.e. 'Romance' would match '(Comedy, Drama, Indie, Romance)'\n\n\n\n\n\n\nq=xxxx\n\n\nSearch input (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\no=xml\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\nattrs=xxx\n\n\nList of requested extended attributes delimeted by \",\"\n\n\n\n\n\n\nextended=1\n\n\nList all extended attributes (attrs ignored)\n\n\n\n\n\n\ndel=1\n\n\nDelete the item from a users cart on download.\n\n\n\n\n\n\nmaxage=123\n\n\nOnly return results which were posted to usenet in the last x days.\n\n\n\n\n\n\noffset=50\n\n\nThe 0 based query offset defining which part of the response we want.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=movie\napikey=xxx\nimdbid=0058935\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\nchannel\n\n    \ntitle\nexample.com\n/title\n\n    \ndescription\nexample.com API results\n/description\n\n    \n!-- \n      More RSS content\n    --\n\n\n    \n!-- offset is the current offset of the response\n         total is the total number of items found by the query\n    --\n\n    \nnewznab:response offset=\"0\" total=\"1234\"/\n\n\n    \nitem\n\n      \n!-- Standard RSS 2.0 data --\n\n      \ntitle\nA.Public.Domain.Movie.720p.DTS.x264\n/title\n \n      \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n      \nlink\nhttp://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\n/link\n \n      \ncomments\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments\n/comments\n  \n      \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n      \ncategory\nMovie \n XviD\n/category\n  \n      \ndescription\nSome movie\n/description\n\n      \nenclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n\n\n      \n!-- Additional attributes --\n\n      \nnewznab:attr name=\"category\" value=\"2000\" /\n \n      \nnewznab:attr name=\"category\" value=\"2030\" /\n \n      \nnewznab:attr name=\"size\"     value=\"4294967295\" /\n \n    \n/item\n\n\n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nMUSIC-SEARCH\n\n\nThe \nMUSIC-SEARCH\n function searches the index for items matching music properties.\nOn successful search the response contains a list of items that matched the\nquery. Even if the search matched nothing an empty but valid response is\ncreated and returned. This function requires passing the user credentials.\n\n\nThe returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally music specific information.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=music\n\n\nMusic-Search function, must always be \"music\".\n\n\n\n\n\n\napikey=xxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\n\n\n\n\nlimit=123\n\n\nUpper limit for the number of items to be returned, e.g. 123.\n\n\n\n\n\n\nalbum=xxxx\n\n\nAlbum title (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\nartist=xxxx\n\n\nArtist name (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\nlabel=xxxx\n\n\nPublisher/Label name (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\ntrack=xxxx\n\n\nTrack name (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\nyear=xxxx\n\n\nFour digit year of release.\n\n\n\n\n\n\ngenre=123\n\n\nList of music genre id's to search delimited by \",\". See CAPS for available genres.\n\n\n\n\n\n\ncat=xxx\n\n\nList of categories to search delimited by \",\"\n\n\n\n\n\n\no=xml\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\nattrs=xxx\n\n\nList of requested extended attributes delimited by \",\"\n\n\n\n\n\n\nextended=1\n\n\nList all extended attributes (attrs ignored)\n\n\n\n\n\n\ndel=1\n\n\nDelete the item from a users cart on download.\n\n\n\n\n\n\nmaxage=123\n\n\nOnly return results which were posted to usenet in the last x days.\n\n\n\n\n\n\noffset=50\n\n\nThe 0 based query offset defining which part of the response we want.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=music\napikey=xxx\nalbum=Groovy\nextended=1\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\nchannel\n\n    \ntitle\nexample.com\n/title\n\n    \ndescription\nexample.com API results\n/description\n\n    \n!-- \n      More RSS content\n    --\n\n\n    \n!-- offset is the current offset of the response\n         total is the total number of items found by the query\n    --\n\n    \nnewznab:response offset=\"0\" total=\"1234\"/\n\n\n    \nitem\n\n      \n!-- Standard RSS 2.0 data --\n\n      \ntitle\nA.Public.Domain.Album.Name\n/title\n \n      \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n      \nlink\nhttp://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\n/link\n \n      \ncomments\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments\n/comments\n  \n      \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n      \ncategory\nMusic \n MP3\n/category\n  \n      \ndescription\nSome music\n/description\n\n      \nenclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n\n\n      \n!-- Additional attributes --\n\n      \nnewznab:attr name=\"category\" value=\"3000\" /\n \n      \nnewznab:attr name=\"category\" value=\"3010\" /\n \n      \nnewznab:attr name=\"size\"     value=\"144967295\" /\n \n      \nnewznab:attr name=\"artist\"   value=\"Bob Smith\" /\n \n      \nnewznab:attr name=\"album\"    value=\"Groovy Tunes\" /\n \n      \nnewznab:attr name=\"publisher\" value=\"Epic Music\" /\n \n      \nnewznab:attr name=\"year\"     value=\"2011\" /\n \n      \nnewznab:attr name=\"tracks\"   value=\"track one|track two|track three\" /\n \n      \nnewznab:attr name=\"coverurl\" value=\"http://servername.com/covers/music/12345.jpg\" /\n \n      \nnewznab:attr name=\"review\"   value=\"This album is great\" /\n \n    \n/item\n\n\n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nBOOK-SEARCH\n\n\nThe \nBOOK-SEARCH\n function searches the index for items matching book properties.\nOn successful search the response contains a list of items that matched the\nquery. Even if the search matched nothing an empty but valid response is\ncreated and returned. This function requires passing the user credentials.\n\n\nThe returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally music specific information.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=book\n\n\nBook-Search function, must always be \"book\".\n\n\n\n\n\n\napikey=xxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\n\n\n\n\nlimit=123\n\n\nUpper limit for the number of items to be returned, e.g. 123.\n\n\n\n\n\n\ntitle=xxxx\n\n\nBook title (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\nauthor=xxxx\n\n\nAuthor name (URL/UTF-8 encoded). Case insensitive.\n\n\n\n\n\n\no=xml\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\nattrs=xxx\n\n\nList of requested extended attributes delimited by \",\"\n\n\n\n\n\n\nextended=1\n\n\nList all extended attributes (attrs ignored)\n\n\n\n\n\n\ndel=1\n\n\nDelete the item from a users cart on download.\n\n\n\n\n\n\nmaxage=123\n\n\nOnly return results which were posted to usenet in the last x days.\n\n\n\n\n\n\noffset=50\n\n\nThe 0 based query offset defining which part of the response we want.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=book\napikey=xxx\nauthor=Charles%20Dack\nextended=1\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\nchannel\n\n    \ntitle\nexample.com\n/title\n\n    \ndescription\nexample.com API results\n/description\n\n    \n!-- \n      More RSS content\n    --\n\n\n    \n!-- offset is the current offset of the response\n         total is the total number of items found by the query\n    --\n\n    \nnewznab:response offset=\"0\" total=\"1234\"/\n\n\n    \nitem\n\n      \n!-- Standard RSS 2.0 data --\n\n      \ntitle\nA.Public.Domain.Book.Name\n/title\n \n      \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n      \nlink\nhttp://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\n/link\n \n      \ncomments\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments\n/comments\n  \n      \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n      \ncategory\nMisc \n Ebook\n/category\n  \n      \ndescription\nSome book\n/description\n\n      \nenclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n\n\n      \n!-- Additional attributes --\n\n      \nnewznab:attr name=\"category\" value=\"7020\" /\n \n      \nnewznab:attr name=\"size\"     value=\"144967295\" /\n \n      \nnewznab:attr name=\"author\"   value=\"Charles Dack\" /\n \n      \nnewznab:attr name=\"title\"    value=\"Weather and Folk Lore of Peterborough and District\" /\n \n      \nnewznab:attr name=\"review\"   value=\"This book is a classic\" /\n \n    \n/item\n\n\n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nDETAILS\n\n\nThe \nDETAILS\n function returns all information for a particular Usenet (NZB) item.\nThe response contains the generic RSS part + full extra information + full\ntype/category specific information.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=details\n\n\nDetails function, must always be \"details\".\n\n\n\n\n\n\nid=xxxx\n\n\nThe GUID of the item being queried.\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=details\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\nchannel\n\n  \nitem\n\n    \n!-- Standard RSS 2.0 Data --\n\n    \ntitle\nA.Public.Domain.Tv.Show.S06E05\n/title\n \n    \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n    \nlink\nhttp://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\n/link\n \n    \ncomments\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments\n/comments\n  \n    \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n    \ncategory\nTV \n XviD\n/category\n  \n    \ndescription\nSome TV show\n/description\n\n    \nenclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n\n\n    \n!-- \n         Additional attributes \n         Details function returns all possible attributes that are 1) known and 2) applicable\n         for the item requested.\n    --\n\n    \nnewznab:attr name=\"category\"   value=\"2000\" /\n \n    \nnewznab:attr name=\"category\"   value=\"2030\" /\n \n    \nnewznab:attr name=\"size\"       value=\"4294967295\" /\n \n    \nnewznab:attr name=\"files\"      value=\"107\" /\n \n    \nnewznab:attr name=\"poster\"     value=\"example@4u.net (example)\" /\n \n    \nnewznab:attr name=\"grabs\"      value=\"1\" /\n \n    \nnewznab:attr name=\"comments\"   value=\"0\" /\n \n    \nnewznab:attr name=\"usenetdate\" value=\"Tue, 22 Jun 2010 06:54:22 +0100\" /\n  \n    \nnewznab:attr name=\"group\"      value=\"alt.binaries.teevee\" /\n\n\n  \n/item\n  \n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nQuery could not be completed because it was malformed\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=details\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"200\" description=\"Missing parameter: key\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=details\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"300\" description=\"No such GUID\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=details\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/\n\n\n\n\n\n\n\n\nGETNFO\n\n\nThe \nGETNFO\n function returns an nfo file for a particular Usenet (NZB) item.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=getnfo\n\n\nDetails function, must always be \"getnfo\".\n\n\n\n\n\n\nid=xxxx\n\n\nThe GUID of the item being queried.\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional parameters\n\n\n\n\n\n\n\n\n\n\n\n\nraw=1\n\n\nIf provided returns just the nfo file without the rss container\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=getnfo\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\nchannel\n\n  \nitem\n\n    \n!-- Standard RSS 2.0 Data --\n\n    \ntitle\nA.Public.Domain.Tv.Show.S06E05\n/title\n \n    \nguid isPermaLink=\"true\"\nhttp://servername.com/details/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n    \nlink\nhttp://servername.com/nfo/e9c515e02346086e3a477a5436d7bc8c\n/link\n \n    \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n    \ndescription\nThis is the nfo file\n/description\n\n    \nenclosure url=\"http://servername.com/nfo/e9c515e02346086e3a477a5436d7bc8c\nampenclosure=1\namp;i=1\namp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /\n \n  \n/item\n  \n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nQuery could not be completed because it was malformed\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=getnfo\napikey=xxxxx\nid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"200\" description=\"Missing parameter: id\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=getnfo\napikey=xxxxx\nid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"300\" description=\"No such GUID\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=getnfo\napikey=xxxxx\nid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/\n\n\n\n\n\n\n\n\nGET\n\n\nThe \nGET\n function returns an nzb for a guid.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=get\n\n\nDetails function, must always be \"get\".\n\n\n\n\n\n\nid=xxxx\n\n\nThe GUID of the item being queried.\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional parameters\n\n\n\n\n\n\n\n\n\n\n\n\ndel=1\n\n\nIf provided removes the nzb from the users cart (if present)\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nNormal behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=get\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n!DOCTYPE nzb PUBLIC \"-//newzBin//DTD NZB 1.1//EN\" \"http://www.newzbin.com/DTD/nzb/nzb-1.1.dtd\"\n\n\nnzb xmlns=\"http://www.newzbin.com/DTD/2003/nzb\"\n\n...\n\n\n\n\n\n\n\nQuery could not be completed because it was malformed\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=get\napikey=xxxxx\nid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"200\" description=\"Missing parameter: id\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=get\napikey=xxxxx\nid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"300\" description=\"No such GUID\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=get\napikey=xxxxx\nid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/\n\n\n\n\n\n\n\n\nCART-ADD\n\n\nThe \nCART-ADD\n function adds an item to the users cart.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=cartadd\n\n\nCart add function, must always be \"cartadd\".\n\n\n\n\n\n\nid=xxxx\n\n\nThe GUID of the item being added to the cart.\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nDefault behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartadd\nid=12344234234234\napikey=xxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\ncartadd id=\"123\" /\n\n\n\n\n\n\n\n\nQuery could not be completed because it was malformed\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartadd\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"200\" description=\"Missing parameter: id\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartadd\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"300\" description=\"No such GUID\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartadd\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because item already exists\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartadd\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"310\" description=\"Item already exists\"/\n\n\n\n\n\n\n\n\nCART-DEL\n\n\nThe \nCART-DEL\n function deletes an item from the users cart.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=cartdel\n\n\nCart del function, must always be \"cartdel\".\n\n\n\n\n\n\nid=xxxx\n\n\nThe GUID of the item being delete from the cart.\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nDefault behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartdel\nid=12344234234234\napikey=xxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\ncartdel id=\"123\" /\n\n\n\n\n\n\n\n\nQuery could not be completed because it was malformed\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartdel\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"200\" description=\"Missing parameter: id\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartdel\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"300\" description=\"No such GUID\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=cartdel\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/\n\n\n\n\n\n\n\n\nCOMMENTS\n\n\nThe \nCOMMENTS\n function returns all comments known about a release.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=comments\n\n\nComments function, must always be \"comments\".\n\n\n\n\n\n\nguid=xxxx\n\n\nThe GUID of the item being queried.\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nDefault behavior\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=comments\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nrss version=\"2.0\"\n\n\nchannel\n\n  \nitem\n\n    \n!-- Standard RSS 2.0 Data --\n\n    \ntitle\nusername_of_poster\n/title\n \n    \nguid isPermaLink=\"true\"\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/guid\n \n    \nlink\nhttp://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c\n/link\n \n    \npubDate\nSun, 06 Jun 2010 17:29:23 +0100\n/pubDate\n \n    \ndescription\nComment about the item\n/description\n\n  \n/item\n  \n\n/channel\n\n\n/rss\n\n\n\n\n\n\n\n\nQuery could not be completed because it was malformed\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=comments\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"200\" description=\"Missing parameter: key\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=comments\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"300\" description=\"No such GUID\"/\n\n\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=comments\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"/\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/\n\n\n\n\n\n\n\n\nCOMMENTS-ADD\n\n\nThe \nCOMMENTS-ADD\n function adds a comment to a release.\n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=commentadd\n\n\nComments-add function, must always be \"commentadd\".\n\n\n\n\n\n\nguid=xxxx\n\n\nThe GUID of the item being queried.\n\n\n\n\n\n\napikey=xxxx\n\n\nUser's key as provided by the service provider.\n\n\n\n\n\n\ntext=xxxx\n\n\nThe comment being added (URL/UTF-8 encoded).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\n\n\n\n\no=xxx\n\n\nOutput format, either \"JSON\" or \"XML\". Default is \"XML\".\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nDefault behavior\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=commentadd\napikey=xxxxx\nguid=xxxxxxxxx\ntext=comment\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\ncommentadd id=\"123\" /\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=commentadd\napikey=xxxxx\nguid=xxxxxxxxx\ntext=comment\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"300\" description=\"No such item\"/\n\n\n\n\n\n\n\n\nAdding comments via API is not enabled\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=commentadd\napikey=xxxxx\nguid=xxxxxxxxx\ntext=comment\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"203\" description=\"Function not available\"/\n\n\n\n\n\n\n\n\nUSER\n\n\nThe \nUSER\n function is used for retrieving information about a user account \n\n\nHTTP Method\n\n\nGET\n\n\nHTTP Response\n\n\n200 OK\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n\n\n\n\nt=user\n\n\nUser function, must always be \"user\"\n\n\n\n\n\n\nusername=xxx\n\n\nA valid username (URL/UTF-8 encoded).\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nDefault behavior \n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=user\nusername=user123\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nuser username=\"user123\" grabs=\"123\" role=\"User\" apirequests=\"100\" downloadrequests=\"100\" \nmovieview=\"1\" musicview=\"1\" consoleview=\"1\" createddate=\"2011-08-23 12:31:47\" /\n\n\n\n\n\n\n\n\nQuery could not be completed because no such item was available\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=user\nusername=user123\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"300\" description=\"No such item\"/\n\n\n\n\n\n\n\n\nFunction disabled\n\n\nRequest\n:\n\n\nGET HTTP://servername.com/api?t=user\nusername=user123\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"203\" description=\"Function not available\"/", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#caps", 
            "text": "The  CAPS  function is used to query the server for supported features and\nthe protocol version and other meta data relevant to the implementation. This\nfunction doesn't require the client to provide any login information but\ncan be executed out of \"login session\".     Returned Fields       server/version  The version of the protocol implemented by the server. All implementations should be backwards compatible.    limits  The limit and defaults to the number of search results returned.    retention  Server retention (how many days NZB information is stored before being purged).    category  Defines a searchable category which might have any number of subcategories.    category/id  Unique category ID, can be either one of the standard category IDs or a site specific ID.    category/name  Any descriptive name for the category. Can be site/language specific.    category/description  A description of the contents of the category.    category/subcat  A subcategory.    category/subcat/id  Unique category ID, can be either one of the standard category IDs or a site specific ID.    category/subcat/name  Any descriptive name for the category. Can be site/language specific.    category/subcat/description  A description of the contents of the category.    groups  Defines a list of active, indexed usenet groups.    group/name  Name of usenet group.    group/description  Description of usenet group.    group/lastupdate  Date and time usenet group was last updated.    genres  Defines a list of active genres.    genre/id  Id of genre.    genre/name  Name of genre.    genre/categoryid  The category the genre is associate with.     HTTP Method  GET  HTTP Response  200 OK     Parameters       t=caps  Caps function, must always be \"caps\".        Optional parameters       o=xxx  Output format, either \"JSON\" or \"XML. Default is \"XML\".     Examples    Normal behavior  Request :  GET http://servername.com/api?t=caps  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"? \n   caps \n     !-- server information -- \n     server version=\"1.0\" title=\"Newznab\" strapline=\"A great usenet indexer\" \n            email=\"info@newznab.com\" url=\"http://servername.com/\" \n            image=\"http://servername.com/theme/black/images/banner.jpg\"/ \n\n     !-- limit parameter range -- \n     limits max=\"100\" default=\"50\"/ \n\n     !-- the server NZB retention -- \n     retention days=\"400\"/ \n\n     !-- registration available or not -- \n     registration available=\"yes\" open=\"yes\" / \n\n     !-- \n         The search functions available at the server \n         The only currently defined search functions are SEARCH and TV-SEARCH.\n         Any conforming implementation should at least support the basic search.\n         Other search functions are optional.\n    -- \n     searching \n         search available=\"yes\"/ \n         tv-search available=\"yes\"/ \n         movie-search available=\"no\"/ \n     /searching \n\n     !-- supported categories -- \n     categories \n         category id=\"1000\" name=\"Console\" \n           subcat id=\"1010\" name=\"NDS\"/ \n           subcat id=\"1020\" name=\"PSP\"/ \n         /category \n         category id=\"2000\" name=\"Movies\" \n           subcat id=\"2010\" name=\"Foreign\"/ \n         /category \n\n         !-- site specific categories -- \n         category id=\"1000001\" name=\"Debian\"           description=\"Latest Debian stuff\"/ \n         category id=\"1000002\" name=\"Mandrake 2010\"    description=\"Mandrake 2010\" \n           subcat id=\"1000003\" name=\"Mandrake 2010 HD\" description=\"Mandrake HD stuff\"/ \n           subcat id=\"1000004\" name=\"Mandrake 2010 SD\" description=\"Mandrake SD stuff\"/ \n         /category \n         !-- etc.. -- \n     /categories                \n   /caps  /xml", 
            "title": "CAPS"
        }, 
        {
            "location": "/functions/#register", 
            "text": "The  REGISTER  function is used for automatically creating and registering\nuser account.  This is an optional function and may or may not be available at\na site. It is also possible that function is available but currently\nregistrations at the site are closed.   The only prerequisite for registering an account is a valid email address\nand any server policies.  It is at the server administration discretion to\nallow or deny registrations based on for example the validity of the email\naddress or the the current client host address.  On successful registration a valid username, password and api key are\nreturned to the caller.  On error an appropriate error code is returned.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=register  Register function, must always be \"register\"    email=xxx  A valid email address to be used for registration. (URL/UTF-8 encoded).     Examples    Normal behavior  Request :  GET HTTP://servername.com/api?t=register email=john.joe%40acme.com  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  register username=\"user123\" password=\"pass123\" apikey=\"abcabcd11234abc\" /     Denial  Request :  GET HTTP://servername.com/api?t=register email=john.joe%40acme.com  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"103\" description=\"Registration denied\"/     Registration limit imposed  Request :  GET HTTP://servername.com/api?t=register email=john.joe%40acme.com  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"104\" description=\"No more registrations allowed\"/     Registration disabled  Request :  GET HTTP://servername.com/api?t=register email=john.joe%40acme.com  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"203\" description=\"Function not available\"/", 
            "title": "REGISTER"
        }, 
        {
            "location": "/functions/#search", 
            "text": "The  SEARCH  function searches the index for items matching the search\ncriteria. On successful search the response contains a list of found items.\nEven if search matched nothing an empty response set is created and returned.\nThis function requires passing the user credentials.  Searches that include categories that are not supported by the server are\nstill executed but the non-supported categories are simply skipped. This\nbasically treats such a search simply as a \"no match\" but allows the same\nquery to be ran simultaneously against several servers.   The list of search categories specifies a logical OR condition. I.e. an item\nmatching the search input in any of the specified categories is considered a\nmatch and is returned. E.g. a search searching for \"linux\" in \"computer\" and\n\"ebook\" categories searches for matching items in \"computer\" and \"ebook\" but\ndoes not search for example the \"movies\" category.  Items found in either\ngroup are then combined into a single result set. If the input string for\nsearch is empty all items (within the server/query limits) are returned for\nthe matching categories.   When performing the query the categories to be searched are concatenated into\na single query parameter by  ,  (comma). For example  cat=200,300,400 ,\nwhich is then URL encoded.  The returned XML data stream is RSS 2.0 compliant and also contains\nadditional information in the extra namespace.  Response-offset field identifies the current subset of all the matches that\nare being transmitted in the response. In other words, if a search for\n\"disco\" finds more matches than the server is capable of transmitting in a\nsingle response, the response needs to be split into several responses. Then\nit is's the clients responsibility to repeat the same query with same\nparameters but specify an increased offset in order to return the next set of\nresults.   If offset query parameter is not used response data contains items between 0\noffset - limit.  If offset query parameter is out of bounds an empty result\nset is returned.  Attrs parameter provides a comma \",\" separated list of additional (extended)\nattributes that the search should return if they are applicable to the\ncurrent item.  If attrs is not specified a set of default parameters is\nreturned.     Important fields of the returned data (RSS)       title  Title of the found item.    guid  A globally unique (GUID) item identifier.    pubdate  The publishing date in RSS date object as specified by RFC822/2822. (not the Usenet date)    category  The category the NZB belongs to. (This is human readable for RSS. More precise category is found in additional data)    enclosure  The NZB url     HTTP Method  GET  HTTP Response  200 OK     Parameters       t=search  Search function, must always be \"search\"    apikey=xxxx  User's key as provided by the service provider.        Optional parameters       q=xxxx  Search input (URL/UTF-8 encoded). Case insensitive.    group=xxxx  List of usenet groups to search delimited by \",\"    limit=123  Upper limit for the number of items to be returned.    cat=xxx  List of categories to search delimited by \",\"    o=xxx  Output format, either \"JSON\" or \"XML\". Default is \"XML\".    attrs=xxx  List of requested extended attributes delimeted by \",\"    extended=1  List all extended attributes (attrs ignored)    del=1  Delete the item from a users cart on download.    maxage=123  Only return results which were posted to usenet in the last x days.    offset=50  The 0 based query offset defining which part of the response we want.     Examples    Normal behavior  Request :  GET http://servername.com/api?t=search apikey=xxxxx q=a%20tv%20show  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel  title example.com /tile  description example.com API results /description  !--  \n   More RSS content\n --  !-- offset is the current offset of the response\n     total is the total number of items found by the query \n --   newznab:response offset=\"0\" total=\"2344\"/  item         \n   !-- Standard RSS 2.0 Data -- \n   title A.Public.Domain.Tv.Show.S06E05 /title  \n   guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n   link http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9 /link  \n   comments http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments /comments   \n   pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n   category TV   XviD /category   \n   description Some TV show /description \n   enclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" / \n\n   !-- Additional attributes -- \n   newznab:attr name=\"category\" value=\"2000\"/  \n   newznab:attr name=\"category\" value=\"2030\"/  \n   newznab:attr name=\"size\"     value=\"4294967295\"/  /item  /channel  /rss     No items matched the search criteria.  Request :  GET http://servername.com/api?t=search apikey=xxxxx q=linux%20image  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss  channel \n     newznab:response offset=\"0\" total=\"0\"/  /channel  /rss     Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=search apikey=xxxxx q=linux%20image  Response :  200  OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"100\" description=\"Incorrect user credentials\"/     Query could not be completed because it was malformed  Request :  GET http://servername.com/api?t=search apikey=xxxxx q=linux%20image  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"200\" description=\"Missing parameter: key\"/", 
            "title": "SEARCH"
        }, 
        {
            "location": "/functions/#tv-search", 
            "text": "The  TV-SEARCH  function searches the index in the TV category for items\nmatching the search criteria.  The criteria includes query string and in\naddition information about season and episode. On successful search the\nresponse contains a list of items that matched the query. Even if the search\nmatched nothing an empty but valid response is created and returned. This\nfunction requires passing the user credentials.  The returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally TV specific information.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=tvsearch  TV-Search function, must always be \"tvsearch\".    apikey=xxx  User's key as provided by the service provider.        Optional parameters       limit=123  Upper limit for the number of items to be returned, e.g. 123.    rid=xxxx  TVRage id of the item being queried.    cat=xxx  List of categories to search delimited by \",\"    season=xxxx  Season string, e.g S13 or 13 for the item being queried.    q=xxxx  Search input (URL/UTF-8 encoded). Case insensitive.    ep=xxx  Episode string, e.g E13 or 13 for the item being queried.    o=xml  Output format, either \"JSON\" or \"XML\". Default is \"XML\".    attrs=xxx  List of requested extended attributes delimeted by \",\"    extended=1  List all extended attributes (attrs ignored)    del=1  Delete the item from a users cart on download.    maxage=123  Only return results which were posted to usenet in the last x days.    offset=50  The 0 based query offset defining which part of the response we want.     Examples    Normal behavior  Request : GET http://servername.com/api?t=tvsearch apikey=xxx q=title season=S03  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel  title example.com /title  description example.com API results /description  !-- \n  More RSS content\n--  !-- offset is the current offset of the response\n     total is the total number of items found by the query\n--  newznab:response offset=\"0\" total=\"1234\"/  item \n   !-- Standard RSS 2.0 data -- \n   title A.Public.Domain.Tv.Show.S06E05 /title  \n   guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n   link http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9 /link  \n   comments http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments /comments   \n   pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n   category TV   XviD /category   \n   description Some TV show /description \n   enclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" / \n\n   !-- Additional attributes -- \n   newznab:attr name=\"category\" value=\"5030\"/ \n   newznab:attr name=\"size\"     value=\"154653309\"/ \n   newznab:attr name=\"season\"   value=\"3\"/ \n   newznab:attr name=\"episode\"  value=\"2\"/  /item  item \n   !-- Standard RSS 2.0 data -- \n   title A.Public.Domain.Tv.Show.S06E05 /title  \n   guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n   link http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9 /link  \n   comments http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments /comments   \n   pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n   category TV   XviD /category   \n   description Some TV show /description \n   enclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" / \n\n   !-- Additional attributes -- \n   newznab:attr name=\"category\" value=\"5000\" /  \n   newznab:attr name=\"category\" value=\"5030\" /  \n   newznab:attr name=\"size\"     value=\"4294967295\" /  \n   newznab:attr name=\"season\"   value=\"3\"/ \n   newznab:attr name=\"episode\"  value=\"1\"/  /item  !-- more items to follow --  /channel  /rss", 
            "title": "TV-SEARCH"
        }, 
        {
            "location": "/functions/#movie-search", 
            "text": "The  MOVIE-SEARCH  function searches the index for items matching an IMDb ID or\nsearch query.  On successful search the response contains a list of items that\nmatched the query. Even if the search matched nothing an empty but valid\nresponse is created and returned. This function requires passing the user\ncredentials.  The returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally movie specific information.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=movie  Movie-Search function, must always be \"movie\".    apikey=xxx  User's key as provided by the service provider.        Optional parameters       limit=123  Upper limit for the number of items to be returned, e.g. 123.    imdbid=xxxx  IMDB id of the item being queried e.g. 0058935.    cat=xxx  List of categories to search delimited by \",\"    genre=xxx  A genre string i.e. 'Romance' would match '(Comedy, Drama, Indie, Romance)'    q=xxxx  Search input (URL/UTF-8 encoded). Case insensitive.    o=xml  Output format, either \"JSON\" or \"XML\". Default is \"XML\".    attrs=xxx  List of requested extended attributes delimeted by \",\"    extended=1  List all extended attributes (attrs ignored)    del=1  Delete the item from a users cart on download.    maxage=123  Only return results which were posted to usenet in the last x days.    offset=50  The 0 based query offset defining which part of the response we want.     Examples    Normal behavior  Request :  GET http://servername.com/api?t=movie apikey=xxx imdbid=0058935  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel \n     title example.com /title \n     description example.com API results /description \n     !-- \n      More RSS content\n    -- \n\n     !-- offset is the current offset of the response\n         total is the total number of items found by the query\n    -- \n     newznab:response offset=\"0\" total=\"1234\"/ \n\n     item \n       !-- Standard RSS 2.0 data -- \n       title A.Public.Domain.Movie.720p.DTS.x264 /title  \n       guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n       link http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9 /link  \n       comments http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments /comments   \n       pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n       category Movie   XviD /category   \n       description Some movie /description \n       enclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" / \n\n       !-- Additional attributes -- \n       newznab:attr name=\"category\" value=\"2000\" /  \n       newznab:attr name=\"category\" value=\"2030\" /  \n       newznab:attr name=\"size\"     value=\"4294967295\" /  \n     /item  /channel  /rss", 
            "title": "MOVIE-SEARCH"
        }, 
        {
            "location": "/functions/#music-search", 
            "text": "The  MUSIC-SEARCH  function searches the index for items matching music properties.\nOn successful search the response contains a list of items that matched the\nquery. Even if the search matched nothing an empty but valid response is\ncreated and returned. This function requires passing the user credentials.  The returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally music specific information.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=music  Music-Search function, must always be \"music\".    apikey=xxx  User's key as provided by the service provider.        Optional Parameters       limit=123  Upper limit for the number of items to be returned, e.g. 123.    album=xxxx  Album title (URL/UTF-8 encoded). Case insensitive.    artist=xxxx  Artist name (URL/UTF-8 encoded). Case insensitive.    label=xxxx  Publisher/Label name (URL/UTF-8 encoded). Case insensitive.    track=xxxx  Track name (URL/UTF-8 encoded). Case insensitive.    year=xxxx  Four digit year of release.    genre=123  List of music genre id's to search delimited by \",\". See CAPS for available genres.    cat=xxx  List of categories to search delimited by \",\"    o=xml  Output format, either \"JSON\" or \"XML\". Default is \"XML\".    attrs=xxx  List of requested extended attributes delimited by \",\"    extended=1  List all extended attributes (attrs ignored)    del=1  Delete the item from a users cart on download.    maxage=123  Only return results which were posted to usenet in the last x days.    offset=50  The 0 based query offset defining which part of the response we want.     Examples    Normal behavior  Request :  GET http://servername.com/api?t=music apikey=xxx album=Groovy extended=1  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel \n     title example.com /title \n     description example.com API results /description \n     !-- \n      More RSS content\n    -- \n\n     !-- offset is the current offset of the response\n         total is the total number of items found by the query\n    -- \n     newznab:response offset=\"0\" total=\"1234\"/ \n\n     item \n       !-- Standard RSS 2.0 data -- \n       title A.Public.Domain.Album.Name /title  \n       guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n       link http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9 /link  \n       comments http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments /comments   \n       pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n       category Music   MP3 /category   \n       description Some music /description \n       enclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" / \n\n       !-- Additional attributes -- \n       newznab:attr name=\"category\" value=\"3000\" /  \n       newznab:attr name=\"category\" value=\"3010\" /  \n       newznab:attr name=\"size\"     value=\"144967295\" /  \n       newznab:attr name=\"artist\"   value=\"Bob Smith\" /  \n       newznab:attr name=\"album\"    value=\"Groovy Tunes\" /  \n       newznab:attr name=\"publisher\" value=\"Epic Music\" /  \n       newznab:attr name=\"year\"     value=\"2011\" /  \n       newznab:attr name=\"tracks\"   value=\"track one|track two|track three\" /  \n       newznab:attr name=\"coverurl\" value=\"http://servername.com/covers/music/12345.jpg\" /  \n       newznab:attr name=\"review\"   value=\"This album is great\" /  \n     /item  /channel  /rss", 
            "title": "MUSIC-SEARCH"
        }, 
        {
            "location": "/functions/#book-search", 
            "text": "The  BOOK-SEARCH  function searches the index for items matching book properties.\nOn successful search the response contains a list of items that matched the\nquery. Even if the search matched nothing an empty but valid response is\ncreated and returned. This function requires passing the user credentials.  The returned XML data stream is RSS 2.0 compliant and also contains additional\ninformation in the extra namespace and optionally music specific information.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=book  Book-Search function, must always be \"book\".    apikey=xxx  User's key as provided by the service provider.        Optional Parameters       limit=123  Upper limit for the number of items to be returned, e.g. 123.    title=xxxx  Book title (URL/UTF-8 encoded). Case insensitive.    author=xxxx  Author name (URL/UTF-8 encoded). Case insensitive.    o=xml  Output format, either \"JSON\" or \"XML\". Default is \"XML\".    attrs=xxx  List of requested extended attributes delimited by \",\"    extended=1  List all extended attributes (attrs ignored)    del=1  Delete the item from a users cart on download.    maxage=123  Only return results which were posted to usenet in the last x days.    offset=50  The 0 based query offset defining which part of the response we want.     Examples    Normal behavior  Request :  GET http://servername.com/api?t=book apikey=xxx author=Charles%20Dack extended=1  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel \n     title example.com /title \n     description example.com API results /description \n     !-- \n      More RSS content\n    -- \n\n     !-- offset is the current offset of the response\n         total is the total number of items found by the query\n    -- \n     newznab:response offset=\"0\" total=\"1234\"/ \n\n     item \n       !-- Standard RSS 2.0 data -- \n       title A.Public.Domain.Book.Name /title  \n       guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n       link http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9 /link  \n       comments http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments /comments   \n       pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n       category Misc   Ebook /category   \n       description Some book /description \n       enclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" / \n\n       !-- Additional attributes -- \n       newznab:attr name=\"category\" value=\"7020\" /  \n       newznab:attr name=\"size\"     value=\"144967295\" /  \n       newznab:attr name=\"author\"   value=\"Charles Dack\" /  \n       newznab:attr name=\"title\"    value=\"Weather and Folk Lore of Peterborough and District\" /  \n       newznab:attr name=\"review\"   value=\"This book is a classic\" /  \n     /item  /channel  /rss", 
            "title": "BOOK-SEARCH"
        }, 
        {
            "location": "/functions/#details", 
            "text": "The  DETAILS  function returns all information for a particular Usenet (NZB) item.\nThe response contains the generic RSS part + full extra information + full\ntype/category specific information.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=details  Details function, must always be \"details\".    id=xxxx  The GUID of the item being queried.    apikey=xxxx  User's key as provided by the service provider.        Optional Parameters       o=xxx  Output format, either \"JSON\" or \"XML\". Default is \"XML\".     Examples    Normal behavior  Request :  GET http://servername.com/api?t=details apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel \n   item \n     !-- Standard RSS 2.0 Data -- \n     title A.Public.Domain.Tv.Show.S06E05 /title  \n     guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n     link http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9 /link  \n     comments http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments /comments   \n     pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n     category TV   XviD /category   \n     description Some TV show /description \n     enclosure url=\"http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" / \n\n     !-- \n         Additional attributes \n         Details function returns all possible attributes that are 1) known and 2) applicable\n         for the item requested.\n    -- \n     newznab:attr name=\"category\"   value=\"2000\" /  \n     newznab:attr name=\"category\"   value=\"2030\" /  \n     newznab:attr name=\"size\"       value=\"4294967295\" /  \n     newznab:attr name=\"files\"      value=\"107\" /  \n     newznab:attr name=\"poster\"     value=\"example@4u.net (example)\" /  \n     newznab:attr name=\"grabs\"      value=\"1\" /  \n     newznab:attr name=\"comments\"   value=\"0\" /  \n     newznab:attr name=\"usenetdate\" value=\"Tue, 22 Jun 2010 06:54:22 +0100\" /   \n     newznab:attr name=\"group\"      value=\"alt.binaries.teevee\" / \n\n   /item    /channel  /rss     Query could not be completed because it was malformed  Request :  GET http://servername.com/api?t=details apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"200\" description=\"Missing parameter: key\"/     Query could not be completed because no such item was available  Request :  GET http://servername.com/api?t=details apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"300\" description=\"No such GUID\"/     Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=details apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"100\" description=\"Incorrect user credentials\"/", 
            "title": "DETAILS"
        }, 
        {
            "location": "/functions/#getnfo", 
            "text": "The  GETNFO  function returns an nfo file for a particular Usenet (NZB) item.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=getnfo  Details function, must always be \"getnfo\".    id=xxxx  The GUID of the item being queried.    apikey=xxxx  User's key as provided by the service provider.        Optional parameters       raw=1  If provided returns just the nfo file without the rss container    o=xxx  Output format, either \"JSON\" or \"XML\". Default is \"XML\".     Examples    Normal behavior  Request :  GET http://servername.com/api?t=getnfo apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel \n   item \n     !-- Standard RSS 2.0 Data -- \n     title A.Public.Domain.Tv.Show.S06E05 /title  \n     guid isPermaLink=\"true\" http://servername.com/details/e9c515e02346086e3a477a5436d7bc8c /guid  \n     link http://servername.com/nfo/e9c515e02346086e3a477a5436d7bc8c /link  \n     pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n     description This is the nfo file /description \n     enclosure url=\"http://servername.com/nfo/e9c515e02346086e3a477a5436d7bc8c ampenclosure=1 amp;i=1 amp;r=18cf9f0a736041465e3bd521d00a90b9\" length=\"154653309\" type=\"application/x-nzb\" /  \n   /item    /channel  /rss     Query could not be completed because it was malformed  Request :  GET http://servername.com/api?t=getnfo apikey=xxxxx id=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"200\" description=\"Missing parameter: id\"/     Query could not be completed because no such item was available  Request :  GET http://servername.com/api?t=getnfo apikey=xxxxx id=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"300\" description=\"No such GUID\"/     Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=getnfo apikey=xxxxx id=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"100\" description=\"Incorrect user credentials\"/", 
            "title": "GETNFO"
        }, 
        {
            "location": "/functions/#get", 
            "text": "The  GET  function returns an nzb for a guid.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=get  Details function, must always be \"get\".    id=xxxx  The GUID of the item being queried.    apikey=xxxx  User's key as provided by the service provider.        Optional parameters       del=1  If provided removes the nzb from the users cart (if present)     Examples    Normal behavior  Request :  GET http://servername.com/api?t=get apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  !DOCTYPE nzb PUBLIC \"-//newzBin//DTD NZB 1.1//EN\" \"http://www.newzbin.com/DTD/nzb/nzb-1.1.dtd\"  nzb xmlns=\"http://www.newzbin.com/DTD/2003/nzb\" \n...    Query could not be completed because it was malformed  Request :  GET http://servername.com/api?t=get apikey=xxxxx id=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"200\" description=\"Missing parameter: id\"/     Query could not be completed because no such item was available  Request :  GET http://servername.com/api?t=get apikey=xxxxx id=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"300\" description=\"No such GUID\"/     Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=get apikey=xxxxx id=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"100\" description=\"Incorrect user credentials\"/", 
            "title": "GET"
        }, 
        {
            "location": "/functions/#cart-add", 
            "text": "The  CART-ADD  function adds an item to the users cart.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=cartadd  Cart add function, must always be \"cartadd\".    id=xxxx  The GUID of the item being added to the cart.    apikey=xxxx  User's key as provided by the service provider.        Optional Parameters       o=xxx  Output format, either \"JSON\" or \"XML\". Default is \"XML\".     Examples    Default behavior  Request :  GET http://servername.com/api?t=cartadd id=12344234234234 apikey=xxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  cartadd id=\"123\" /     Query could not be completed because it was malformed  Request :  GET http://servername.com/api?t=cartadd apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"200\" description=\"Missing parameter: id\"/     Query could not be completed because no such item was available  Request :  GET http://servername.com/api?t=cartadd apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"300\" description=\"No such GUID\"/     Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=cartadd apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"100\" description=\"Incorrect user credentials\"/     Query could not be completed because item already exists  Request :  GET http://servername.com/api?t=cartadd apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"310\" description=\"Item already exists\"/", 
            "title": "CART-ADD"
        }, 
        {
            "location": "/functions/#cart-del", 
            "text": "The  CART-DEL  function deletes an item from the users cart.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=cartdel  Cart del function, must always be \"cartdel\".    id=xxxx  The GUID of the item being delete from the cart.    apikey=xxxx  User's key as provided by the service provider.        Optional Parameters       o=xxx  Output format, either \"JSON\" or \"XML\". Default is \"XML\".     Examples    Default behavior  Request :  GET http://servername.com/api?t=cartdel id=12344234234234 apikey=xxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  cartdel id=\"123\" /     Query could not be completed because it was malformed  Request :  GET http://servername.com/api?t=cartdel apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"200\" description=\"Missing parameter: id\"/     Query could not be completed because no such item was available  Request :  GET http://servername.com/api?t=cartdel apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"300\" description=\"No such GUID\"/     Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=cartdel apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"100\" description=\"Incorrect user credentials\"/", 
            "title": "CART-DEL"
        }, 
        {
            "location": "/functions/#comments", 
            "text": "The  COMMENTS  function returns all comments known about a release.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=comments  Comments function, must always be \"comments\".    guid=xxxx  The GUID of the item being queried.    apikey=xxxx  User's key as provided by the service provider.        Optional Parameters       o=xxx  Output format, either \"JSON\" or \"XML\". Default is \"XML\".     Examples    Default behavior  Request :  GET http://servername.com/api?t=comments apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  rss version=\"2.0\"  channel \n   item \n     !-- Standard RSS 2.0 Data -- \n     title username_of_poster /title  \n     guid isPermaLink=\"true\" http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /guid  \n     link http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c /link  \n     pubDate Sun, 06 Jun 2010 17:29:23 +0100 /pubDate  \n     description Comment about the item /description \n   /item    /channel  /rss     Query could not be completed because it was malformed  Request :  GET http://servername.com/api?t=comments apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"200\" description=\"Missing parameter: key\"/     Query could not be completed because no such item was available  Request :  GET http://servername.com/api?t=comments apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"300\" description=\"No such GUID\"/     Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=comments apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"/  error code=\"100\" description=\"Incorrect user credentials\"/", 
            "title": "COMMENTS"
        }, 
        {
            "location": "/functions/#comments-add", 
            "text": "The  COMMENTS-ADD  function adds a comment to a release.  HTTP Method  GET  HTTP Response  200 OK     Parameters       t=commentadd  Comments-add function, must always be \"commentadd\".    guid=xxxx  The GUID of the item being queried.    apikey=xxxx  User's key as provided by the service provider.    text=xxxx  The comment being added (URL/UTF-8 encoded).        Optional Parameters       o=xxx  Output format, either \"JSON\" or \"XML\". Default is \"XML\".     Examples    Default behavior  Request :  GET HTTP://servername.com/api?t=commentadd apikey=xxxxx guid=xxxxxxxxx text=comment  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  commentadd id=\"123\" /     Query could not be completed because no such item was available  Request :  GET HTTP://servername.com/api?t=commentadd apikey=xxxxx guid=xxxxxxxxx text=comment  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"300\" description=\"No such item\"/     Adding comments via API is not enabled  Request :  GET HTTP://servername.com/api?t=commentadd apikey=xxxxx guid=xxxxxxxxx text=comment  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"203\" description=\"Function not available\"/", 
            "title": "COMMENTS-ADD"
        }, 
        {
            "location": "/functions/#user", 
            "text": "The  USER  function is used for retrieving information about a user account   HTTP Method  GET  HTTP Response  200 OK     Parameters       t=user  User function, must always be \"user\"    username=xxx  A valid username (URL/UTF-8 encoded).     Examples    Default behavior   Request :  GET HTTP://servername.com/api?t=user username=user123  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  user username=\"user123\" grabs=\"123\" role=\"User\" apirequests=\"100\" downloadrequests=\"100\" \nmovieview=\"1\" musicview=\"1\" consoleview=\"1\" createddate=\"2011-08-23 12:31:47\" /     Query could not be completed because no such item was available  Request :  GET HTTP://servername.com/api?t=user username=user123  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"300\" description=\"No such item\"/     Function disabled  Request :  GET HTTP://servername.com/api?t=user username=user123  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"203\" description=\"Function not available\"/", 
            "title": "USER"
        }, 
        {
            "location": "/errors/", 
            "text": "Newznab Error Codes\n\n\nUnder normal circumstances i.e. when the HTTP request/response sequence is\nsuccessfully completed Newznab implementations always respond with\n\nHTTP 200 OK\n.  However this doesn't mean that the query was semantically\ncorrect. It simply means that the HTTP part of the sequence was successful.\nOne then must check the actual response body/data to see if the request was\ncompleted without errors. \n\n\nIn case of a Newznab error the response contains an error code and an a\ndescription of the error.\n\n\nThe error codes have been defined into different ranges. 100-199 Account/user\ncredentials specific error codes, 200-299 API call specific error codes,\n300-399 content specific error codes and finally 900-999 Other error codes.\n\n\n\n\n\n\n\n\nError code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n100\n\n\nIncorrect user credentials\n\n\n\n\n\n\n101\n\n\nAccount suspended\n\n\n\n\n\n\n102\n\n\nInsufficient privileges/not authorized\n\n\n\n\n\n\n103\n\n\nRegistration denied\n\n\n\n\n\n\n104\n\n\nRegistrations are closed\n\n\n\n\n\n\n105\n\n\nInvalid registration (Email Address Taken)\n\n\n\n\n\n\n106\n\n\nInvalid registration (Email Address Bad Format)\n\n\n\n\n\n\n107\n\n\nRegistration Failed (Data error)\n\n\n\n\n\n\n200\n\n\nMissing parameter\n\n\n\n\n\n\n201\n\n\nIncorrect parameter\n\n\n\n\n\n\n202\n\n\nNo such function. (Function not defined in this specification).\n\n\n\n\n\n\n203\n\n\nFunction not available. (Optional function is not implemented).\n\n\n\n\n\n\n300\n\n\nNo such item.\n\n\n\n\n\n\n300\n\n\nItem already exists.\n\n\n\n\n\n\n900\n\n\nUnknown error\n\n\n\n\n\n\n910\n\n\nAPI Disabled\n\n\n\n\n\n\n\n\nError code example\n\n\n\n\n\n\nQuery could not be completed because user credentials are broken\n\n\nRequest\n:\n\n\nGET http://servername.com/api?t=details\napikey=xxxxx\nguid=xxxxxxxxx\n\n\nResponse\n:\n\n\n200 OK\n\n\nContent\n:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nerror code=\"100\" description=\"Incorrect user credentials\"/", 
            "title": "Errors"
        }, 
        {
            "location": "/errors/#newznab-error-codes", 
            "text": "Under normal circumstances i.e. when the HTTP request/response sequence is\nsuccessfully completed Newznab implementations always respond with HTTP 200 OK .  However this doesn't mean that the query was semantically\ncorrect. It simply means that the HTTP part of the sequence was successful.\nOne then must check the actual response body/data to see if the request was\ncompleted without errors.   In case of a Newznab error the response contains an error code and an a\ndescription of the error.  The error codes have been defined into different ranges. 100-199 Account/user\ncredentials specific error codes, 200-299 API call specific error codes,\n300-399 content specific error codes and finally 900-999 Other error codes.     Error code  Description      100  Incorrect user credentials    101  Account suspended    102  Insufficient privileges/not authorized    103  Registration denied    104  Registrations are closed    105  Invalid registration (Email Address Taken)    106  Invalid registration (Email Address Bad Format)    107  Registration Failed (Data error)    200  Missing parameter    201  Incorrect parameter    202  No such function. (Function not defined in this specification).    203  Function not available. (Optional function is not implemented).    300  No such item.    300  Item already exists.    900  Unknown error    910  API Disabled", 
            "title": "Newznab Error Codes"
        }, 
        {
            "location": "/errors/#error-code-example", 
            "text": "Query could not be completed because user credentials are broken  Request :  GET http://servername.com/api?t=details apikey=xxxxx guid=xxxxxxxxx  Response :  200 OK  Content :  ?xml version=\"1.0\" encoding=\"UTF-8\"?  error code=\"100\" description=\"Incorrect user credentials\"/", 
            "title": "Error code example"
        }, 
        {
            "location": "/attributes/", 
            "text": "Predefined Attributes\n\n\nA set of known attributes for items in different categories has been defined.\nIts possible that not all attributes are available at all times. Therefore a\nclient application should not rely on any particular attributes being in the\nreturned data but should take this list as an optional extra information.\nHowever attributes marked with * are always available.\n\n\nAdditionally, not all attributes are applicable to all items. The category \ninformation can be used to check which attributes area available for which \ncategory items.\n\n\nAll attributes are defined using XML namespace syntax:\n\nxmlns:newznab=\"http://www.newznab.com/DTD/2010/feeds/attributes/\"\n\n\nList of Attributes\n\n\n\n\n\n\n\n\nAttribute\n\n\nCategory\n\n\nDescription\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nsize *\n\n\nALL\n\n\nSize in bytes\n\n\n\"252322\"\n\n\n\n\n\n\ncategory *\n\n\nALL\n\n\nItem's category\n\n\n\"5004\"\n\n\n\n\n\n\nguid\n\n\nALL\n\n\nUnique release guid\n\n\n\"6c6734da3e92a7b0e494e896b58081da\"\n\n\n\n\n\n\nfiles\n\n\nALL\n\n\nNumber of files\n\n\n\"4\"\n\n\n\n\n\n\nposter\n\n\nALL\n\n\nNNTP Poster\n\n\n\"yenc@power-post\"\n\n\n\n\n\n\ngroup\n\n\nALL\n\n\nNNTP Group(s)\n\n\n\"a.b.group, a.b.teevee\"\n\n\n\n\n\n\nteam\n\n\nALL\n\n\nTeam doing the release\n\n\n\"DiAMOND\"\n\n\n\n\n\n\ngrabs\n\n\nALL\n\n\nNumber of times item downloaded\n\n\n\"1\"\n\n\n\n\n\n\npassword\n\n\nALL\n\n\nWhether the archive is passworded\n\n\n\"0\" no, \"1\" rar pass, \"2\" contains inner archive\n\n\n\n\n\n\ncomments\n\n\nALL\n\n\nNumber of comments\n\n\n\"2\"\n\n\n\n\n\n\nusenetdate\n\n\nALL\n\n\nDate posted to usenet\n\n\n\"Tue, 22 Jun 2010 06:54:22 +0100\"\n\n\n\n\n\n\ninfo\n\n\nALL\n\n\nInfo (.nfo) file URL\n\n\n\"http://somesite/stuff/info.php?id=1234\"\n\n\n\n\n\n\nyear\n\n\nALL\n\n\nRelease year\n\n\n\"2009\"\n\n\n\n\n\n\nseason\n\n\nTV\n\n\nNumeric season\n\n\n\"1\"\n\n\n\n\n\n\nepisode\n\n\nTV\n\n\nNumeric episode within the season\n\n\n\"1\"\n\n\n\n\n\n\nrageid\n\n\nTV\n\n\nTVRage ID. (www.tvrage.com)\n\n\n\"2322\"\n\n\n\n\n\n\ntvtitle\n\n\nTV\n\n\nTVRage Show Title. (www.tvrage.com)\n\n\n\"Duck and Cover\"\n\n\n\n\n\n\ntvairdate\n\n\nTV\n\n\nTVRage Show Air date. (www.tvrage.com)\n\n\n\"Tue, 22 Jun 2010 06:54:22 +0100\"\n\n\n\n\n\n\nvideo\n\n\nTV, Movies\n\n\nVideo codec\n\n\n\"x264\"\n\n\n\n\n\n\naudio\n\n\nTV, Movies, Audio\n\n\nAudio codec\n\n\n\"AC3 2.0 @ 384 kbs\"\n\n\n\n\n\n\nresolution\n\n\nTV, Movies\n\n\nVideo resolution\n\n\n\"1280x716 1.78:1\"\n\n\n\n\n\n\nframerate\n\n\nTV, Movies\n\n\nVideo fps\n\n\n\"23.976 fps\"\n\n\n\n\n\n\nlanguage\n\n\nTV, Movies, Audio\n\n\nNatural languages\n\n\n\"English\"\n\n\n\n\n\n\nsubs\n\n\nTV, Movies\n\n\nSubtitles\n\n\n\"English, Spanish\"\n\n\n\n\n\n\nimdb\n\n\nMovies\n\n\nIMDb ID  (www.imdb.com)\n\n\n\"0104409\"\n\n\n\n\n\n\nimdbscore\n\n\nMovies\n\n\nIMDb score\n\n\n\"5/10\"\n\n\n\n\n\n\nimdbtitle\n\n\nMovies\n\n\nIMDb score\n\n\n\"Bobs Movie\"\n\n\n\n\n\n\nimdbtagline\n\n\nMovies\n\n\nIMDb tagline\n\n\n\"Bobs new adventure\"\n\n\n\n\n\n\nimdbplot\n\n\nMovies\n\n\nIMDb plot\n\n\n\"All about the movie\"\n\n\n\n\n\n\nimdbyear\n\n\nMovies\n\n\nIMDb year\n\n\n\"1971\"\n\n\n\n\n\n\nimdbdirector\n\n\nMovies\n\n\nIMDb director\n\n\n\"Bob Smith\"\n\n\n\n\n\n\nimdbactors\n\n\nMovies\n\n\nIMDb actors\n\n\n\"Bob Smith, Kate Smith\"\n\n\n\n\n\n\ngenre\n\n\nTV, Movies\n\n\nGenre\n\n\n\"Horror, Comedy\"\n\n\n\n\n\n\nartist\n\n\nMusic\n\n\nArtist name\n\n\n\"Bob Smith\"\n\n\n\n\n\n\nalbum\n\n\nMusic\n\n\nAlbum name\n\n\n\"Groovy Tunes\"\n\n\n\n\n\n\npublisher\n\n\nMusic, Book\n\n\nPublisher name\n\n\n\"Epic Music\"\n\n\n\n\n\n\ntracks\n\n\nMusic\n\n\nTrack listing\n\n\n\"track one\n\n\n\n\n\n\ncoverurl\n\n\nTV, Movies, Music, Book\n\n\nURL to cover image\n\n\n\"http://servername.com/covers/music/12345.jpg\"\n\n\n\n\n\n\nbackdropcoverurl\n\n\nTV, Movies, Music\n\n\nURL to backdrop image\n\n\n\"http://servername.com/covers/movies/12345-backdrop.jpg\"\n\n\n\n\n\n\nreview\n\n\nMovies, Music, Book\n\n\nCritics review\n\n\n\"This media is great\"\n\n\n\n\n\n\nbooktitle\n\n\nBook\n\n\nBook title\n\n\n\"Weather and Folk Lore of Peterborough and District\"\n\n\n\n\n\n\npublishdate\n\n\nBook\n\n\nDate book published\n\n\n\"Tue, 22 Jun 2010 06:54:22 +0100\"\n\n\n\n\n\n\nauthor\n\n\nBook\n\n\nBook author\n\n\n\"Charles Dack\"\n\n\n\n\n\n\npages\n\n\nBook\n\n\nNumber of pages\n\n\n\"123\"\n\n\n\n\n\n\n\n\nAttribute Example\n\n\nExample attribute declarations within \nitem\n element:\n\n\nnewznab:attr name=\"category\" value=\"2000\" /\n \n\nnewznab:attr name=\"category\" value=\"2030\" /\n \n\nnewznab:attr name=\"size\"     value=\"4294967295\" /", 
            "title": "Attributes"
        }, 
        {
            "location": "/attributes/#predefined-attributes", 
            "text": "A set of known attributes for items in different categories has been defined.\nIts possible that not all attributes are available at all times. Therefore a\nclient application should not rely on any particular attributes being in the\nreturned data but should take this list as an optional extra information.\nHowever attributes marked with * are always available.  Additionally, not all attributes are applicable to all items. The category \ninformation can be used to check which attributes area available for which \ncategory items.  All attributes are defined using XML namespace syntax: xmlns:newznab=\"http://www.newznab.com/DTD/2010/feeds/attributes/\"", 
            "title": "Predefined Attributes"
        }, 
        {
            "location": "/attributes/#list-of-attributes", 
            "text": "Attribute  Category  Description  Example value      size *  ALL  Size in bytes  \"252322\"    category *  ALL  Item's category  \"5004\"    guid  ALL  Unique release guid  \"6c6734da3e92a7b0e494e896b58081da\"    files  ALL  Number of files  \"4\"    poster  ALL  NNTP Poster  \"yenc@power-post\"    group  ALL  NNTP Group(s)  \"a.b.group, a.b.teevee\"    team  ALL  Team doing the release  \"DiAMOND\"    grabs  ALL  Number of times item downloaded  \"1\"    password  ALL  Whether the archive is passworded  \"0\" no, \"1\" rar pass, \"2\" contains inner archive    comments  ALL  Number of comments  \"2\"    usenetdate  ALL  Date posted to usenet  \"Tue, 22 Jun 2010 06:54:22 +0100\"    info  ALL  Info (.nfo) file URL  \"http://somesite/stuff/info.php?id=1234\"    year  ALL  Release year  \"2009\"    season  TV  Numeric season  \"1\"    episode  TV  Numeric episode within the season  \"1\"    rageid  TV  TVRage ID. (www.tvrage.com)  \"2322\"    tvtitle  TV  TVRage Show Title. (www.tvrage.com)  \"Duck and Cover\"    tvairdate  TV  TVRage Show Air date. (www.tvrage.com)  \"Tue, 22 Jun 2010 06:54:22 +0100\"    video  TV, Movies  Video codec  \"x264\"    audio  TV, Movies, Audio  Audio codec  \"AC3 2.0 @ 384 kbs\"    resolution  TV, Movies  Video resolution  \"1280x716 1.78:1\"    framerate  TV, Movies  Video fps  \"23.976 fps\"    language  TV, Movies, Audio  Natural languages  \"English\"    subs  TV, Movies  Subtitles  \"English, Spanish\"    imdb  Movies  IMDb ID  (www.imdb.com)  \"0104409\"    imdbscore  Movies  IMDb score  \"5/10\"    imdbtitle  Movies  IMDb score  \"Bobs Movie\"    imdbtagline  Movies  IMDb tagline  \"Bobs new adventure\"    imdbplot  Movies  IMDb plot  \"All about the movie\"    imdbyear  Movies  IMDb year  \"1971\"    imdbdirector  Movies  IMDb director  \"Bob Smith\"    imdbactors  Movies  IMDb actors  \"Bob Smith, Kate Smith\"    genre  TV, Movies  Genre  \"Horror, Comedy\"    artist  Music  Artist name  \"Bob Smith\"    album  Music  Album name  \"Groovy Tunes\"    publisher  Music, Book  Publisher name  \"Epic Music\"    tracks  Music  Track listing  \"track one    coverurl  TV, Movies, Music, Book  URL to cover image  \"http://servername.com/covers/music/12345.jpg\"    backdropcoverurl  TV, Movies, Music  URL to backdrop image  \"http://servername.com/covers/movies/12345-backdrop.jpg\"    review  Movies, Music, Book  Critics review  \"This media is great\"    booktitle  Book  Book title  \"Weather and Folk Lore of Peterborough and District\"    publishdate  Book  Date book published  \"Tue, 22 Jun 2010 06:54:22 +0100\"    author  Book  Book author  \"Charles Dack\"    pages  Book  Number of pages  \"123\"", 
            "title": "List of Attributes"
        }, 
        {
            "location": "/attributes/#attribute-example", 
            "text": "Example attribute declarations within  item  element:  newznab:attr name=\"category\" value=\"2000\" /   newznab:attr name=\"category\" value=\"2030\" /   newznab:attr name=\"size\"     value=\"4294967295\" /", 
            "title": "Attribute Example"
        }, 
        {
            "location": "/categories/", 
            "text": "Predefined Categories\n\n\nIn order to facilitate operation that does not rely on a particular natural\nlanguage, e.g. English a set of predefined category IDs have been defined. It\nis possible to define custom categories  in the custom category range. Each\ncategory is given a range for a set of subcategories. It is possible for an\nitem to belong to several categories at the same time.\n\n\nCategory Ranges\n\n\n\n\n\n\n\n\nCategory Range\n\n\nCategory Name\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n0000-0999\n\n\nReserved\n\n\n\n\n\n\n\n\n1000-1999\n\n\nConsole\n\n\n\n\n\n\n\n\n2000-2999\n\n\nMovies\n\n\n\n\n\n\n\n\n3000-3999\n\n\nAudio\n\n\n\n\n\n\n\n\n4000-4999\n\n\nPC\n\n\n\n\n\n\n\n\n5000-5999\n\n\nTV\n\n\n\n\n\n\n\n\n6000-6999\n\n\nXXX\n\n\n\n\n\n\n\n\n7000-7999\n\n\nOther\n\n\n\n\n\n\n\n\n8000-99999\n\n\nReserved\n\n\nReserved for future expansion\n\n\n\n\n\n\n100000-\n\n\nCustom\n\n\nSite specific category range. Defined in CAPS.\n\n\n\n\n\n\n\n\nCategory List\n\n\n\n\n\n\n\n\nCategories\n\n\nCategory Name\n\n\n\n\n\n\n\n\n\n\n0000\n\n\nReserved\n\n\n\n\n\n\n1000\n\n\nConsole\n\n\n\n\n\n\n1010\n\n\nConsole/NDS\n\n\n\n\n\n\n1020\n\n\nConsole/PSP\n\n\n\n\n\n\n1030\n\n\nConsole/Wii\n\n\n\n\n\n\n1040\n\n\nConsole/XBox\n\n\n\n\n\n\n1050\n\n\nConsole/XBox 360\n\n\n\n\n\n\n1060\n\n\nConsole/Wiiware\n\n\n\n\n\n\n1070\n\n\nConsole/XBox 360 DLC\n\n\n\n\n\n\n2000\n\n\nMovies\n\n\n\n\n\n\n2010\n\n\nMovies/Foreign\n\n\n\n\n\n\n2020\n\n\nMovies/Other\n\n\n\n\n\n\n2030\n\n\nMovies/SD\n\n\n\n\n\n\n2040\n\n\nMovies/HD\n\n\n\n\n\n\n2050\n\n\nMovies/BluRay\n\n\n\n\n\n\n2060\n\n\nMovies/3D\n\n\n\n\n\n\n3000\n\n\nAudio\n\n\n\n\n\n\n3010\n\n\nAudio/MP3\n\n\n\n\n\n\n3020\n\n\nAudio/Video\n\n\n\n\n\n\n3030\n\n\nAudio/Audiobook\n\n\n\n\n\n\n3040\n\n\nAudio/Lossless\n\n\n\n\n\n\n4000\n\n\nPC\n\n\n\n\n\n\n4010\n\n\nPC/0day\n\n\n\n\n\n\n4020\n\n\nPC/ISO\n\n\n\n\n\n\n4030\n\n\nPC/Mac\n\n\n\n\n\n\n4040\n\n\nPC/Mobile-Other\n\n\n\n\n\n\n4050\n\n\nPC/Games\n\n\n\n\n\n\n4060\n\n\nPC/Mobile-iOS\n\n\n\n\n\n\n4070\n\n\nPC/Mobile-Android\n\n\n\n\n\n\n5000\n\n\nTV\n\n\n\n\n\n\n5020\n\n\nTV/Foreign\n\n\n\n\n\n\n5030\n\n\nTV/SD\n\n\n\n\n\n\n5040\n\n\nTV/HD\n\n\n\n\n\n\n5050\n\n\nTV/Other\n\n\n\n\n\n\n5060\n\n\nTV/Sport\n\n\n\n\n\n\n6000\n\n\nXXX\n\n\n\n\n\n\n6010\n\n\nXXX/DVD\n\n\n\n\n\n\n6020\n\n\nXXX/WMV\n\n\n\n\n\n\n6030\n\n\nXXX/XviD\n\n\n\n\n\n\n6040\n\n\nXXX/x264\n\n\n\n\n\n\n7000\n\n\nOther\n\n\n\n\n\n\n7010\n\n\nMisc\n\n\n\n\n\n\n7020\n\n\nEBook\n\n\n\n\n\n\n7030\n\n\nComics\n\n\n\n\n\n\n100000-\n\n\nCustom", 
            "title": "Categories"
        }, 
        {
            "location": "/categories/#predefined-categories", 
            "text": "In order to facilitate operation that does not rely on a particular natural\nlanguage, e.g. English a set of predefined category IDs have been defined. It\nis possible to define custom categories  in the custom category range. Each\ncategory is given a range for a set of subcategories. It is possible for an\nitem to belong to several categories at the same time.  Category Ranges     Category Range  Category Name  Comments      0000-0999  Reserved     1000-1999  Console     2000-2999  Movies     3000-3999  Audio     4000-4999  PC     5000-5999  TV     6000-6999  XXX     7000-7999  Other     8000-99999  Reserved  Reserved for future expansion    100000-  Custom  Site specific category range. Defined in CAPS.     Category List     Categories  Category Name      0000  Reserved    1000  Console    1010  Console/NDS    1020  Console/PSP    1030  Console/Wii    1040  Console/XBox    1050  Console/XBox 360    1060  Console/Wiiware    1070  Console/XBox 360 DLC    2000  Movies    2010  Movies/Foreign    2020  Movies/Other    2030  Movies/SD    2040  Movies/HD    2050  Movies/BluRay    2060  Movies/3D    3000  Audio    3010  Audio/MP3    3020  Audio/Video    3030  Audio/Audiobook    3040  Audio/Lossless    4000  PC    4010  PC/0day    4020  PC/ISO    4030  PC/Mac    4040  PC/Mobile-Other    4050  PC/Games    4060  PC/Mobile-iOS    4070  PC/Mobile-Android    5000  TV    5020  TV/Foreign    5030  TV/SD    5040  TV/HD    5050  TV/Other    5060  TV/Sport    6000  XXX    6010  XXX/DVD    6020  XXX/WMV    6030  XXX/XviD    6040  XXX/x264    7000  Other    7010  Misc    7020  EBook    7030  Comics    100000-  Custom", 
            "title": "Predefined Categories"
        }
    ]
}